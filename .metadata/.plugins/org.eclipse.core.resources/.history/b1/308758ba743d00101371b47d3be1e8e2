package com.chatapp.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.chatapp.entities.Messages;
import com.chatapp.entities.Room;
import com.chatapp.services.RoomService;

@RestController
@RequestMapping("/api/rooms")
@CrossOrigin("*")
public class RoomController {

	@Autowired
	private RoomService service;

	public RoomController(RoomService service) {
		this.service = service;
	}

	@PostMapping
	public ResponseEntity<?> createRoom(@RequestBody String roomId) {

		if (roomId == null || roomId.isEmpty()) {
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Room Id Can't be null");
		} else if (service.getRoomById(roomId) != null) {
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Room Already Exist");
		} else {

			Room room = new Room();
			room.setRoomId(roomId);
			Room savedRoom = service.createNewRoom(room);

			return ResponseEntity.status(HttpStatus.CREATED).body(savedRoom);
		}
	}

	@GetMapping("/{roomId}")
	public ResponseEntity<?> joinRoom(@PathVariable String roomId) {

		Room room = service.getRoomById(roomId);
		if (room == null) {
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Room Not Found");
		}
		return ResponseEntity.status(HttpStatus.OK).body(room);
	}

	@GetMapping("/{roomId}/messages")
	public ResponseEntity<?> getMessages(@PathVariable String roomId,
			@RequestParam(value = "page", defaultValue = "0", required = false) int page,
			@RequestParam(value = "size", defaultValue = "20", required = false) int size) {

		Room room = service.getRoomById(roomId);
		if (room == null) {
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
		}
		List<Messages> messages = room.getMessages();
		int start = Math.max(0, messages.size() - (page + 1) * size);
		int end = Math.min(messages.size(), start + size);
		List<Messages> paginatedMessage = messages.subList(start, end);
		return ResponseEntity.status(HttpStatus.OK).body(messages);
	}

}
